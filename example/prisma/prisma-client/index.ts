// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from 'graphql'
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model,
} from 'prisma-client-lib'
import { typeDefs } from './prisma-schema'

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U]

export type Maybe<T> = T | undefined | null

export interface Exists {
  bookmark: (where?: BookmarkWhereInput) => Promise<boolean>
  user: (where?: UserWhereInput) => Promise<boolean>
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>
}

export interface Prisma {
  $exists: Exists
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any },
  ) => Promise<T>

  /**
   * Queries
   */

  bookmark: (where: BookmarkWhereUniqueInput) => BookmarkNullablePromise
  bookmarks: (args?: {
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => FragmentableArray<Bookmark>
  bookmarksConnection: (args?: {
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => BookmarkConnectionPromise
  user: (where: UserWhereUniqueInput) => UserNullablePromise
  users: (args?: {
    where?: UserWhereInput
    orderBy?: UserOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => FragmentableArray<User>
  usersConnection: (args?: {
    where?: UserWhereInput
    orderBy?: UserOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => UserConnectionPromise
  node: (args: { id: ID_Output }) => Node

  /**
   * Mutations
   */

  createBookmark: (data: BookmarkCreateInput) => BookmarkPromise
  updateBookmark: (args: {
    data: BookmarkUpdateInput
    where: BookmarkWhereUniqueInput
  }) => BookmarkPromise
  updateManyBookmarks: (args: {
    data: BookmarkUpdateManyMutationInput
    where?: BookmarkWhereInput
  }) => BatchPayloadPromise
  upsertBookmark: (args: {
    where: BookmarkWhereUniqueInput
    create: BookmarkCreateInput
    update: BookmarkUpdateInput
  }) => BookmarkPromise
  deleteBookmark: (where: BookmarkWhereUniqueInput) => BookmarkPromise
  deleteManyBookmarks: (where?: BookmarkWhereInput) => BatchPayloadPromise
  createUser: (data: UserCreateInput) => UserPromise
  updateUser: (args: {
    data: UserUpdateInput
    where: UserWhereUniqueInput
  }) => UserPromise
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput
    where?: UserWhereInput
  }) => BatchPayloadPromise
  upsertUser: (args: {
    where: UserWhereUniqueInput
    create: UserCreateInput
    update: UserUpdateInput
  }) => UserPromise
  deleteUser: (where: UserWhereUniqueInput) => UserPromise
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise

  /**
   * Subscriptions
   */

  $subscribe: Subscription
}

export interface Subscription {
  bookmark: (
    where?: BookmarkSubscriptionWhereInput,
  ) => BookmarkSubscriptionPayloadSubscription
  user: (
    where?: UserSubscriptionWhereInput,
  ) => UserSubscriptionPayloadSubscription
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T
}

/**
 * Types
 */

export type BookmarkOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'label_ASC'
  | 'label_DESC'
  | 'page_ASC'
  | 'page_DESC'
  | 'numberOfVisits_ASC'
  | 'numberOfVisits_DESC'

export type UserOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'phoneNumber_ASC'
  | 'phoneNumber_DESC'

export type MutationType = 'CREATED' | 'UPDATED' | 'DELETED'

export interface UserUpdateOneWithoutBookmarksInput {
  create?: Maybe<UserCreateWithoutBookmarksInput>
  update?: Maybe<UserUpdateWithoutBookmarksDataInput>
  upsert?: Maybe<UserUpsertWithoutBookmarksInput>
  delete?: Maybe<Boolean>
  disconnect?: Maybe<Boolean>
  connect?: Maybe<UserWhereUniqueInput>
}

export type BookmarkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>
}>

export interface BookmarkUpdateManyWithoutUserInput {
  create?: Maybe<
    BookmarkCreateWithoutUserInput[] | BookmarkCreateWithoutUserInput
  >
  delete?: Maybe<BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput>
  connect?: Maybe<BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput>
  set?: Maybe<BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput>
  disconnect?: Maybe<BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput>
  update?: Maybe<
    | BookmarkUpdateWithWhereUniqueWithoutUserInput[]
    | BookmarkUpdateWithWhereUniqueWithoutUserInput
  >
  upsert?: Maybe<
    | BookmarkUpsertWithWhereUniqueWithoutUserInput[]
    | BookmarkUpsertWithWhereUniqueWithoutUserInput
  >
  deleteMany?: Maybe<BookmarkScalarWhereInput[] | BookmarkScalarWhereInput>
  updateMany?: Maybe<
    | BookmarkUpdateManyWithWhereNestedInput[]
    | BookmarkUpdateManyWithWhereNestedInput
  >
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>
  name: String
  phoneNumber: String
  bookmarks?: Maybe<BookmarkCreateManyWithoutUserInput>
}

export interface BookmarkUpdateManyMutationInput {
  label?: Maybe<String>
  page?: Maybe<String>
  numberOfVisits?: Maybe<Int>
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>
  updatedFields_contains?: Maybe<String>
  updatedFields_contains_every?: Maybe<String[] | String>
  updatedFields_contains_some?: Maybe<String[] | String>
  node?: Maybe<UserWhereInput>
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>
}

export interface BookmarkCreateInput {
  id?: Maybe<ID_Input>
  label: String
  page: String
  numberOfVisits: Int
  user?: Maybe<UserCreateOneWithoutBookmarksInput>
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>
  phoneNumber?: Maybe<String>
}

export interface UserCreateOneWithoutBookmarksInput {
  create?: Maybe<UserCreateWithoutBookmarksInput>
  connect?: Maybe<UserWhereUniqueInput>
}

export interface BookmarkUpdateManyWithWhereNestedInput {
  where: BookmarkScalarWhereInput
  data: BookmarkUpdateManyDataInput
}

export interface UserCreateWithoutBookmarksInput {
  id?: Maybe<ID_Input>
  name: String
  phoneNumber: String
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>
}>

export interface BookmarkUpdateInput {
  label?: Maybe<String>
  page?: Maybe<String>
  numberOfVisits?: Maybe<Int>
  user?: Maybe<UserUpdateOneWithoutBookmarksInput>
}

export interface BookmarkUpdateWithoutUserDataInput {
  label?: Maybe<String>
  page?: Maybe<String>
  numberOfVisits?: Maybe<Int>
}

export interface UserUpdateInput {
  name?: Maybe<String>
  phoneNumber?: Maybe<String>
  bookmarks?: Maybe<BookmarkUpdateManyWithoutUserInput>
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>
  id_not?: Maybe<ID_Input>
  id_in?: Maybe<ID_Input[] | ID_Input>
  id_not_in?: Maybe<ID_Input[] | ID_Input>
  id_lt?: Maybe<ID_Input>
  id_lte?: Maybe<ID_Input>
  id_gt?: Maybe<ID_Input>
  id_gte?: Maybe<ID_Input>
  id_contains?: Maybe<ID_Input>
  id_not_contains?: Maybe<ID_Input>
  id_starts_with?: Maybe<ID_Input>
  id_not_starts_with?: Maybe<ID_Input>
  id_ends_with?: Maybe<ID_Input>
  id_not_ends_with?: Maybe<ID_Input>
  name?: Maybe<String>
  name_not?: Maybe<String>
  name_in?: Maybe<String[] | String>
  name_not_in?: Maybe<String[] | String>
  name_lt?: Maybe<String>
  name_lte?: Maybe<String>
  name_gt?: Maybe<String>
  name_gte?: Maybe<String>
  name_contains?: Maybe<String>
  name_not_contains?: Maybe<String>
  name_starts_with?: Maybe<String>
  name_not_starts_with?: Maybe<String>
  name_ends_with?: Maybe<String>
  name_not_ends_with?: Maybe<String>
  phoneNumber?: Maybe<String>
  phoneNumber_not?: Maybe<String>
  phoneNumber_in?: Maybe<String[] | String>
  phoneNumber_not_in?: Maybe<String[] | String>
  phoneNumber_lt?: Maybe<String>
  phoneNumber_lte?: Maybe<String>
  phoneNumber_gt?: Maybe<String>
  phoneNumber_gte?: Maybe<String>
  phoneNumber_contains?: Maybe<String>
  phoneNumber_not_contains?: Maybe<String>
  phoneNumber_starts_with?: Maybe<String>
  phoneNumber_not_starts_with?: Maybe<String>
  phoneNumber_ends_with?: Maybe<String>
  phoneNumber_not_ends_with?: Maybe<String>
  bookmarks_every?: Maybe<BookmarkWhereInput>
  bookmarks_some?: Maybe<BookmarkWhereInput>
  bookmarks_none?: Maybe<BookmarkWhereInput>
  AND?: Maybe<UserWhereInput[] | UserWhereInput>
  OR?: Maybe<UserWhereInput[] | UserWhereInput>
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>
}

export interface UserUpdateWithoutBookmarksDataInput {
  name?: Maybe<String>
  phoneNumber?: Maybe<String>
}

export interface BookmarkUpdateManyDataInput {
  label?: Maybe<String>
  page?: Maybe<String>
  numberOfVisits?: Maybe<Int>
}

export interface BookmarkCreateManyWithoutUserInput {
  create?: Maybe<
    BookmarkCreateWithoutUserInput[] | BookmarkCreateWithoutUserInput
  >
  connect?: Maybe<BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput>
}

export interface BookmarkCreateWithoutUserInput {
  id?: Maybe<ID_Input>
  label: String
  page: String
  numberOfVisits: Int
}

export interface BookmarkWhereInput {
  id?: Maybe<ID_Input>
  id_not?: Maybe<ID_Input>
  id_in?: Maybe<ID_Input[] | ID_Input>
  id_not_in?: Maybe<ID_Input[] | ID_Input>
  id_lt?: Maybe<ID_Input>
  id_lte?: Maybe<ID_Input>
  id_gt?: Maybe<ID_Input>
  id_gte?: Maybe<ID_Input>
  id_contains?: Maybe<ID_Input>
  id_not_contains?: Maybe<ID_Input>
  id_starts_with?: Maybe<ID_Input>
  id_not_starts_with?: Maybe<ID_Input>
  id_ends_with?: Maybe<ID_Input>
  id_not_ends_with?: Maybe<ID_Input>
  label?: Maybe<String>
  label_not?: Maybe<String>
  label_in?: Maybe<String[] | String>
  label_not_in?: Maybe<String[] | String>
  label_lt?: Maybe<String>
  label_lte?: Maybe<String>
  label_gt?: Maybe<String>
  label_gte?: Maybe<String>
  label_contains?: Maybe<String>
  label_not_contains?: Maybe<String>
  label_starts_with?: Maybe<String>
  label_not_starts_with?: Maybe<String>
  label_ends_with?: Maybe<String>
  label_not_ends_with?: Maybe<String>
  page?: Maybe<String>
  page_not?: Maybe<String>
  page_in?: Maybe<String[] | String>
  page_not_in?: Maybe<String[] | String>
  page_lt?: Maybe<String>
  page_lte?: Maybe<String>
  page_gt?: Maybe<String>
  page_gte?: Maybe<String>
  page_contains?: Maybe<String>
  page_not_contains?: Maybe<String>
  page_starts_with?: Maybe<String>
  page_not_starts_with?: Maybe<String>
  page_ends_with?: Maybe<String>
  page_not_ends_with?: Maybe<String>
  numberOfVisits?: Maybe<Int>
  numberOfVisits_not?: Maybe<Int>
  numberOfVisits_in?: Maybe<Int[] | Int>
  numberOfVisits_not_in?: Maybe<Int[] | Int>
  numberOfVisits_lt?: Maybe<Int>
  numberOfVisits_lte?: Maybe<Int>
  numberOfVisits_gt?: Maybe<Int>
  numberOfVisits_gte?: Maybe<Int>
  user?: Maybe<UserWhereInput>
  AND?: Maybe<BookmarkWhereInput[] | BookmarkWhereInput>
  OR?: Maybe<BookmarkWhereInput[] | BookmarkWhereInput>
  NOT?: Maybe<BookmarkWhereInput[] | BookmarkWhereInput>
}

export interface UserUpsertWithoutBookmarksInput {
  update: UserUpdateWithoutBookmarksDataInput
  create: UserCreateWithoutBookmarksInput
}

export interface BookmarkScalarWhereInput {
  id?: Maybe<ID_Input>
  id_not?: Maybe<ID_Input>
  id_in?: Maybe<ID_Input[] | ID_Input>
  id_not_in?: Maybe<ID_Input[] | ID_Input>
  id_lt?: Maybe<ID_Input>
  id_lte?: Maybe<ID_Input>
  id_gt?: Maybe<ID_Input>
  id_gte?: Maybe<ID_Input>
  id_contains?: Maybe<ID_Input>
  id_not_contains?: Maybe<ID_Input>
  id_starts_with?: Maybe<ID_Input>
  id_not_starts_with?: Maybe<ID_Input>
  id_ends_with?: Maybe<ID_Input>
  id_not_ends_with?: Maybe<ID_Input>
  label?: Maybe<String>
  label_not?: Maybe<String>
  label_in?: Maybe<String[] | String>
  label_not_in?: Maybe<String[] | String>
  label_lt?: Maybe<String>
  label_lte?: Maybe<String>
  label_gt?: Maybe<String>
  label_gte?: Maybe<String>
  label_contains?: Maybe<String>
  label_not_contains?: Maybe<String>
  label_starts_with?: Maybe<String>
  label_not_starts_with?: Maybe<String>
  label_ends_with?: Maybe<String>
  label_not_ends_with?: Maybe<String>
  page?: Maybe<String>
  page_not?: Maybe<String>
  page_in?: Maybe<String[] | String>
  page_not_in?: Maybe<String[] | String>
  page_lt?: Maybe<String>
  page_lte?: Maybe<String>
  page_gt?: Maybe<String>
  page_gte?: Maybe<String>
  page_contains?: Maybe<String>
  page_not_contains?: Maybe<String>
  page_starts_with?: Maybe<String>
  page_not_starts_with?: Maybe<String>
  page_ends_with?: Maybe<String>
  page_not_ends_with?: Maybe<String>
  numberOfVisits?: Maybe<Int>
  numberOfVisits_not?: Maybe<Int>
  numberOfVisits_in?: Maybe<Int[] | Int>
  numberOfVisits_not_in?: Maybe<Int[] | Int>
  numberOfVisits_lt?: Maybe<Int>
  numberOfVisits_lte?: Maybe<Int>
  numberOfVisits_gt?: Maybe<Int>
  numberOfVisits_gte?: Maybe<Int>
  AND?: Maybe<BookmarkScalarWhereInput[] | BookmarkScalarWhereInput>
  OR?: Maybe<BookmarkScalarWhereInput[] | BookmarkScalarWhereInput>
  NOT?: Maybe<BookmarkScalarWhereInput[] | BookmarkScalarWhereInput>
}

export interface BookmarkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>
  updatedFields_contains?: Maybe<String>
  updatedFields_contains_every?: Maybe<String[] | String>
  updatedFields_contains_some?: Maybe<String[] | String>
  node?: Maybe<BookmarkWhereInput>
  AND?: Maybe<BookmarkSubscriptionWhereInput[] | BookmarkSubscriptionWhereInput>
  OR?: Maybe<BookmarkSubscriptionWhereInput[] | BookmarkSubscriptionWhereInput>
  NOT?: Maybe<BookmarkSubscriptionWhereInput[] | BookmarkSubscriptionWhereInput>
}

export interface BookmarkUpdateWithWhereUniqueWithoutUserInput {
  where: BookmarkWhereUniqueInput
  data: BookmarkUpdateWithoutUserDataInput
}

export interface BookmarkUpsertWithWhereUniqueWithoutUserInput {
  where: BookmarkWhereUniqueInput
  update: BookmarkUpdateWithoutUserDataInput
  create: BookmarkCreateWithoutUserInput
}

export interface NodeNode {
  id: ID_Output
}

export interface UserPreviousValues {
  id: ID_Output
  name: String
  phoneNumber: String
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>
  name: () => Promise<String>
  phoneNumber: () => Promise<String>
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  name: () => Promise<AsyncIterator<String>>
  phoneNumber: () => Promise<AsyncIterator<String>>
}

export interface AggregateBookmark {
  count: Int
}

export interface AggregateBookmarkPromise
  extends Promise<AggregateBookmark>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregateBookmarkSubscription
  extends Promise<AsyncIterator<AggregateBookmark>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface BookmarkSubscriptionPayload {
  mutation: MutationType
  node: Bookmark
  updatedFields: String[]
  previousValues: BookmarkPreviousValues
}

export interface BookmarkSubscriptionPayloadPromise
  extends Promise<BookmarkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = BookmarkPromise>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = BookmarkPreviousValuesPromise>() => T
}

export interface BookmarkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookmarkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = BookmarkSubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = BookmarkPreviousValuesSubscription>() => T
}

export interface BookmarkEdge {
  node: Bookmark
  cursor: String
}

export interface BookmarkEdgePromise
  extends Promise<BookmarkEdge>,
    Fragmentable {
  node: <T = BookmarkPromise>() => T
  cursor: () => Promise<String>
}

export interface BookmarkEdgeSubscription
  extends Promise<AsyncIterator<BookmarkEdge>>,
    Fragmentable {
  node: <T = BookmarkSubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export interface User {
  id: ID_Output
  name: String
  phoneNumber: String
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>
  name: () => Promise<String>
  phoneNumber: () => Promise<String>
  bookmarks: <T = FragmentableArray<Bookmark>>(args?: {
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => T
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  name: () => Promise<AsyncIterator<String>>
  phoneNumber: () => Promise<AsyncIterator<String>>
  bookmarks: <T = Promise<AsyncIterator<BookmarkSubscription>>>(args?: {
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => T
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>
  name: () => Promise<String>
  phoneNumber: () => Promise<String>
  bookmarks: <T = FragmentableArray<Bookmark>>(args?: {
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => T
}

export interface AggregateUser {
  count: Int
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface Bookmark {
  id: ID_Output
  label: String
  page: String
  numberOfVisits: Int
}

export interface BookmarkPromise extends Promise<Bookmark>, Fragmentable {
  id: () => Promise<ID_Output>
  label: () => Promise<String>
  page: () => Promise<String>
  numberOfVisits: () => Promise<Int>
  user: <T = UserPromise>() => T
}

export interface BookmarkSubscription
  extends Promise<AsyncIterator<Bookmark>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  label: () => Promise<AsyncIterator<String>>
  page: () => Promise<AsyncIterator<String>>
  numberOfVisits: () => Promise<AsyncIterator<Int>>
  user: <T = UserSubscription>() => T
}

export interface BookmarkNullablePromise
  extends Promise<Bookmark | null>,
    Fragmentable {
  id: () => Promise<ID_Output>
  label: () => Promise<String>
  page: () => Promise<String>
  numberOfVisits: () => Promise<Int>
  user: <T = UserPromise>() => T
}

export interface BookmarkConnection {
  pageInfo: PageInfo
  edges: BookmarkEdge[]
}

export interface BookmarkConnectionPromise
  extends Promise<BookmarkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T
  edges: <T = FragmentableArray<BookmarkEdge>>() => T
  aggregate: <T = AggregateBookmarkPromise>() => T
}

export interface BookmarkConnectionSubscription
  extends Promise<AsyncIterator<BookmarkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<BookmarkEdgeSubscription>>>() => T
  aggregate: <T = AggregateBookmarkSubscription>() => T
}

export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>
  hasPreviousPage: () => Promise<Boolean>
  startCursor: () => Promise<String>
  endCursor: () => Promise<String>
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>
  startCursor: () => Promise<AsyncIterator<String>>
  endCursor: () => Promise<AsyncIterator<String>>
}

export interface BatchPayload {
  count: Long
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>
}

export interface UserEdge {
  node: User
  cursor: String
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T
  cursor: () => Promise<String>
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export interface UserSubscriptionPayload {
  mutation: MutationType
  node: User
  updatedFields: String[]
  previousValues: UserPreviousValues
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = UserPromise>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = UserPreviousValuesPromise>() => T
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = UserSubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = UserPreviousValuesSubscription>() => T
}

export interface BookmarkPreviousValues {
  id: ID_Output
  label: String
  page: String
  numberOfVisits: Int
}

export interface BookmarkPreviousValuesPromise
  extends Promise<BookmarkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>
  label: () => Promise<String>
  page: () => Promise<String>
  numberOfVisits: () => Promise<Int>
}

export interface BookmarkPreviousValuesSubscription
  extends Promise<AsyncIterator<BookmarkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  label: () => Promise<AsyncIterator<String>>
  page: () => Promise<AsyncIterator<String>>
  numberOfVisits: () => Promise<AsyncIterator<Int>>
}

export interface UserConnection {
  pageInfo: PageInfo
  edges: UserEdge[]
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T
  edges: <T = FragmentableArray<UserEdge>>() => T
  aggregate: <T = AggregateUserPromise>() => T
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T
  aggregate: <T = AggregateUserSubscription>() => T
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

export type Long = string

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: 'User',
    embedded: false,
  },
  {
    name: 'Bookmark',
    embedded: false,
  },
]

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/matic-zavadlal-03c51f/prisma-faker/dev`,
})
export const prisma = new Prisma()
